/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.9
** This class was generated on 18-11-2016 02:12:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using TwitterAnalyticsDBL.DataObjects;

namespace TwitterAnalyticsDBL.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTweetMentions.
	///</Summary>
	public partial class BOTweetMentions : AzureSQLDBConn_BaseBusiness
	{
		#region member variables
		protected Int64? _id;
		protected DateTime _time;
		protected string _topic;
		protected Int64? _count;
		protected double? _avg;
		protected double? _min;
		protected double? _max;
		protected double? _stdev;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOTweetMentions()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 id
		///</parameters>
		public BOTweetMentions(Int64 id)
		{
			try
			{
				DAOTweetMentions daoTweetMentions = DAOTweetMentions.SelectOne(id);
				_id = daoTweetMentions.Id;
				_time = daoTweetMentions.Time;
				_topic = daoTweetMentions.Topic;
				_count = daoTweetMentions.Count;
				_avg = daoTweetMentions.Avg;
				_min = daoTweetMentions.Min;
				_max = daoTweetMentions.Max;
				_stdev = daoTweetMentions.Stdev;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTweetMentions
		///</parameters>
		protected internal BOTweetMentions(DAOTweetMentions daoTweetMentions)
		{
			try
			{
				_id = daoTweetMentions.Id;
				_time = daoTweetMentions.Time;
				_topic = daoTweetMentions.Topic;
				_count = daoTweetMentions.Count;
				_avg = daoTweetMentions.Avg;
				_min = daoTweetMentions.Min;
				_max = daoTweetMentions.Max;
				_stdev = daoTweetMentions.Stdev;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new TweetMentions record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOTweetMentions daoTweetMentions = new DAOTweetMentions();
			RegisterDataObject(daoTweetMentions);
			BeginTransaction("savenewBOTweetMentions");
			try
			{
				daoTweetMentions.Time = _time;
				daoTweetMentions.Topic = _topic;
				daoTweetMentions.Count = _count;
				daoTweetMentions.Avg = _avg;
				daoTweetMentions.Min = _min;
				daoTweetMentions.Max = _max;
				daoTweetMentions.Stdev = _stdev;
				daoTweetMentions.Insert();
				CommitTransaction();
				
				_id = daoTweetMentions.Id;
				_time = daoTweetMentions.Time;
				_topic = daoTweetMentions.Topic;
				_count = daoTweetMentions.Count;
				_avg = daoTweetMentions.Avg;
				_min = daoTweetMentions.Min;
				_max = daoTweetMentions.Max;
				_stdev = daoTweetMentions.Stdev;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOTweetMentions");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one TweetMentions record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTweetMentions
		///</parameters>
		public virtual void Update()
		{
			DAOTweetMentions daoTweetMentions = new DAOTweetMentions();
			RegisterDataObject(daoTweetMentions);
			BeginTransaction("updateBOTweetMentions");
			try
			{
				daoTweetMentions.Id = _id;
				daoTweetMentions.Time = _time;
				daoTweetMentions.Topic = _topic;
				daoTweetMentions.Count = _count;
				daoTweetMentions.Avg = _avg;
				daoTweetMentions.Min = _min;
				daoTweetMentions.Max = _max;
				daoTweetMentions.Stdev = _stdev;
				daoTweetMentions.Update();
				CommitTransaction();
				
				_id = daoTweetMentions.Id;
				_time = daoTweetMentions.Time;
				_topic = daoTweetMentions.Topic;
				_count = daoTweetMentions.Count;
				_avg = daoTweetMentions.Avg;
				_min = daoTweetMentions.Min;
				_max = daoTweetMentions.Max;
				_stdev = daoTweetMentions.Stdev;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOTweetMentions");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one TweetMentions record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOTweetMentions daoTweetMentions = new DAOTweetMentions();
			RegisterDataObject(daoTweetMentions);
			BeginTransaction("deleteBOTweetMentions");
			try
			{
				daoTweetMentions.Id = _id;
				daoTweetMentions.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOTweetMentions");
				throw;
			}
		}
		
		///<Summary>
		///TweetMentionsCollection
		///This method returns the collection of BOTweetMentions objects
		///</Summary>
		///<returns>
		///List[BOTweetMentions]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTweetMentions> TweetMentionsCollection()
		{
			try
			{
				IList<BOTweetMentions> boTweetMentionsCollection = new List<BOTweetMentions>();
				IList<DAOTweetMentions> daoTweetMentionsCollection = DAOTweetMentions.SelectAll();
			
				foreach(DAOTweetMentions daoTweetMentions in daoTweetMentionsCollection)
					boTweetMentionsCollection.Add(new BOTweetMentions(daoTweetMentions));
			
				return boTweetMentionsCollection;
			}
			catch
			{
				throw;
			}
		}

        ///<Summary>
		///TweetMentionsLatestTen
		///This method returns the collection of BOTweetMentions objects
		///</Summary>
		///<returns>
		///List[BOTweetMentions]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTweetMentions> TweetMentionsLatest()
        {
            try
            {
                IList<BOTweetMentions> boTweetMentionsCollection = new List<BOTweetMentions>();
                IList<DAOTweetMentions> daoTweetMentionsCollection = DAOTweetMentions.SelectLatest();

                foreach (DAOTweetMentions daoTweetMentions in daoTweetMentionsCollection)
                    boTweetMentionsCollection.Add(new BOTweetMentions(daoTweetMentions));

                return boTweetMentionsCollection;
            }
            catch(Exception ex)
            {
                throw ex;
            }
        }


        ///<Summary>
        ///TweetMentionsCollectionCount
        ///This method returns the collection count of BOTweetMentions objects
        ///</Summary>
        ///<returns>
        ///Int32
        ///</returns>
        ///<parameters>
        ///
        ///</parameters>
        public static Int32 TweetMentionsCollectionCount()
		{
			try
			{
				Int32 objCount = DAOTweetMentions.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TweetMentionsCollectionFromSearchFields
		///This method returns the collection of BOTweetMentions objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOTweetMentions>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTweetMentions> TweetMentionsCollectionFromSearchFields(BOTweetMentions boTweetMentions)
		{
			try
			{
				IList<BOTweetMentions> boTweetMentionsCollection = new List<BOTweetMentions>();
				DAOTweetMentions daoTweetMentions = new DAOTweetMentions();
				daoTweetMentions.Id = boTweetMentions.Id;
				daoTweetMentions.Time = boTweetMentions.Time;
				daoTweetMentions.Topic = boTweetMentions.Topic;
				daoTweetMentions.Count = boTweetMentions.Count;
				daoTweetMentions.Avg = boTweetMentions.Avg;
				daoTweetMentions.Min = boTweetMentions.Min;
				daoTweetMentions.Max = boTweetMentions.Max;
				daoTweetMentions.Stdev = boTweetMentions.Stdev;
				IList<DAOTweetMentions> daoTweetMentionsCollection = DAOTweetMentions.SelectAllBySearchFields(daoTweetMentions);
			
				foreach(DAOTweetMentions resdaoTweetMentions in daoTweetMentionsCollection)
					boTweetMentionsCollection.Add(new BOTweetMentions(resdaoTweetMentions));
			
				return boTweetMentionsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TweetMentionsCollectionFromSearchFieldsCount
		///This method returns the collection count of BOTweetMentions objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TweetMentionsCollectionFromSearchFieldsCount(BOTweetMentions boTweetMentions)
		{
			try
			{
				DAOTweetMentions daoTweetMentions = new DAOTweetMentions();
				daoTweetMentions.Id = boTweetMentions.Id;
				daoTweetMentions.Time = boTweetMentions.Time;
				daoTweetMentions.Topic = boTweetMentions.Topic;
				daoTweetMentions.Count = boTweetMentions.Count;
				daoTweetMentions.Avg = boTweetMentions.Avg;
				daoTweetMentions.Min = boTweetMentions.Min;
				daoTweetMentions.Max = boTweetMentions.Max;
				daoTweetMentions.Stdev = boTweetMentions.Stdev;
				Int32 objCount = DAOTweetMentions.SelectAllBySearchFieldsCount(daoTweetMentions);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime Time
		{
			get
			{
				 return _time;
			}
			set
			{
				_time = value;
				_isDirty = true;
			}
		}
		
		public virtual string Topic
		{
			get
			{
				 return _topic;
			}
			set
			{
				_topic = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? Count
		{
			get
			{
				 return _count;
			}
			set
			{
				_count = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Avg
		{
			get
			{
				 return _avg;
			}
			set
			{
				_avg = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Min
		{
			get
			{
				 return _min;
			}
			set
			{
				_min = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Max
		{
			get
			{
				 return _max;
			}
			set
			{
				_max = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Stdev
		{
			get
			{
				 return _stdev;
			}
			set
			{
				_stdev = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
