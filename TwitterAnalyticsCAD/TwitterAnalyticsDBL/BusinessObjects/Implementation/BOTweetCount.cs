/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.9
** This class was generated on 18-11-2016 02:12:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using TwitterAnalyticsDBL.DataObjects;

namespace TwitterAnalyticsDBL.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTweetCount.
	///</Summary>
	public partial class BOTweetCount : AzureSQLDBConn_BaseBusiness
	{
		#region member variables
		protected Int64? _id;
		protected string _topic;
		protected Int32? _sentimentScore;
		protected string _placeTimeZone;
		protected string _tweetText;
		protected Int32? _retweeted;
		protected Int32? _retweetCount;
		protected DateTime? _createdAt;
		protected bool _isDirty = false;
        protected int _totalCount;

        /*collection member objects*******************/
        /*********************************************/
        #endregion

        #region class methods
        ///<Summary>
        ///Constructor
        ///This is the default constructor
        ///</Summary>
        ///<returns>
        ///void
        ///</returns>
        ///<parameters>
        ///
        ///</parameters>
        public BOTweetCount()
		{
		}

		
		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTweetCount
		///</parameters>
		protected internal BOTweetCount(DAOTweetCount daoTweetCount)
		{
			try
			{
				_id = daoTweetCount.Id;
				_topic = daoTweetCount.Topic;
				_sentimentScore = daoTweetCount.SentimentScore;
				_placeTimeZone = daoTweetCount.PlaceTimeZone;
				_tweetText = daoTweetCount.TweetText;
				_retweeted = daoTweetCount.Retweeted;
				_retweetCount = daoTweetCount.RetweetCount;
				_createdAt = daoTweetCount.CreatedAt;
                _totalCount = daoTweetCount.TotalCount;
			}
			catch
			{
				throw;
			}
		}

		
		
		///<Summary>
		///Update
		///This method updates one TweetCount record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTweetCount
		///</parameters>
		public virtual void Update()
		{
			DAOTweetCount daoTweetCount = new DAOTweetCount();
			RegisterDataObject(daoTweetCount);
			BeginTransaction("updateBOTweetCount");
			try
			{
				daoTweetCount.Id = _id;
				daoTweetCount.Topic = _topic;
				daoTweetCount.SentimentScore = _sentimentScore;
				daoTweetCount.PlaceTimeZone = _placeTimeZone;
				daoTweetCount.TweetText = _tweetText;
				daoTweetCount.Retweeted = _retweeted;
				daoTweetCount.RetweetCount = _retweetCount;
				daoTweetCount.CreatedAt = _createdAt;
				daoTweetCount.Update();
				CommitTransaction();
				
				_id = daoTweetCount.Id;
				_topic = daoTweetCount.Topic;
				_sentimentScore = daoTweetCount.SentimentScore;
				_placeTimeZone = daoTweetCount.PlaceTimeZone;
				_tweetText = daoTweetCount.TweetText;
				_retweeted = daoTweetCount.Retweeted;
				_retweetCount = daoTweetCount.RetweetCount;
				_createdAt = daoTweetCount.CreatedAt;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOTweetCount");
				throw;
			}
		}
		
		///<Summary>
		///TweetCountCollection
		///This method returns the collection of BOTweetCount objects
		///</Summary>
		///<returns>
		///List[BOTweetCount]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTweetCount> TweetCountCollection()
		{
			try
			{
				IList<BOTweetCount> boTweetCountCollection = new List<BOTweetCount>();
				IList<DAOTweetCount> daoTweetCountCollection = DAOTweetCount.SelectAll();
			
				foreach(DAOTweetCount daoTweetCount in daoTweetCountCollection)
					boTweetCountCollection.Add(new BOTweetCount(daoTweetCount));
			
				return boTweetCountCollection;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

        ///<Summary>
		///TweetCountCollection
		///This method returns the collection of BOTweetCount objects
		///</Summary>
		///<returns>
		///List[BOTweetCount]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTweetCount> TweetCountGetTweetsGreatorThanId(long Id)
        {
            try
            {
                IList<BOTweetCount> boTweetCountCollection = new List<BOTweetCount>();
                IList<DAOTweetCount> daoTweetCountCollection = DAOTweetCount.SelectAllTweetGreaterThanId(Id);

                foreach (DAOTweetCount daoTweetCount in daoTweetCountCollection)
                    boTweetCountCollection.Add(new BOTweetCount(daoTweetCount));

                return boTweetCountCollection;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        ///<Summary>
        ///TweetCountCollectionCount
        ///This method returns the collection count of BOTweetCount objects
        ///</Summary>
        ///<returns>
        ///Int32
        ///</returns>
        ///<parameters>
        ///
        ///</parameters>
        public static Int32 TweetCountCollectionCount()
		{
			try
			{
				Int32 objCount = DAOTweetCount.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TweetCountCollectionFromSearchFields
		///This method returns the collection of BOTweetCount objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOTweetCount>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTweetCount> TweetCountCollectionFromSearchFields(BOTweetCount boTweetCount)
		{
			try
			{
				IList<BOTweetCount> boTweetCountCollection = new List<BOTweetCount>();
				DAOTweetCount daoTweetCount = new DAOTweetCount();
				daoTweetCount.Id = boTweetCount.Id;
				daoTweetCount.Topic = boTweetCount.Topic;
				daoTweetCount.SentimentScore = boTweetCount.SentimentScore;
				daoTweetCount.PlaceTimeZone = boTweetCount.PlaceTimeZone;
				daoTweetCount.TweetText = boTweetCount.TweetText;
				daoTweetCount.Retweeted = boTweetCount.Retweeted;
				daoTweetCount.RetweetCount = boTweetCount.RetweetCount;
				daoTweetCount.CreatedAt = boTweetCount.CreatedAt;
				IList<DAOTweetCount> daoTweetCountCollection = DAOTweetCount.SelectAllBySearchFields(daoTweetCount);
			
				foreach(DAOTweetCount resdaoTweetCount in daoTweetCountCollection)
					boTweetCountCollection.Add(new BOTweetCount(resdaoTweetCount));
			
				return boTweetCountCollection;
			}
			catch
			{
				throw;
			}
		}

        ///<Summary>
		///TweetCountGetTopics
		///This method returns the collection of BOTweetCount objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOTweetCount>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTweetCount> TweetCountGetTopics()
        {
            try
            {
                IList<BOTweetCount> boTweetCountCollection = new List<BOTweetCount>();
             
                IList<DAOTweetCount> daoTweetCountCollection = DAOTweetCount.TweetCountGetTopics();

                foreach (DAOTweetCount resdaoTweetCount in daoTweetCountCollection)
                    boTweetCountCollection.Add(new BOTweetCount(resdaoTweetCount));

                return boTweetCountCollection;
            }
            catch
            {
                throw;
            }
        }


        ///<Summary>
        ///TweetCountCollectionFromSearchFieldsCount
        ///This method returns the collection count of BOTweetCount objects, filtered by a search object
        ///</Summary>
        ///<returns>
        ///Int32
        ///</returns>
        ///<parameters>
        ///
        ///</parameters>
        public static Int32 TweetCountCollectionFromSearchFieldsCount(BOTweetCount boTweetCount)
		{
			try
			{
				DAOTweetCount daoTweetCount = new DAOTweetCount();
				daoTweetCount.Id = boTweetCount.Id;
				daoTweetCount.Topic = boTweetCount.Topic;
				daoTweetCount.SentimentScore = boTweetCount.SentimentScore;
				daoTweetCount.PlaceTimeZone = boTweetCount.PlaceTimeZone;
				daoTweetCount.TweetText = boTweetCount.TweetText;
				daoTweetCount.Retweeted = boTweetCount.Retweeted;
				daoTweetCount.RetweetCount = boTweetCount.RetweetCount;
				daoTweetCount.CreatedAt = boTweetCount.CreatedAt;
				Int32 objCount = DAOTweetCount.SelectAllBySearchFieldsCount(daoTweetCount);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Topic
		{
			get
			{
				 return _topic;
			}
			set
			{
				_topic = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SentimentScore
		{
			get
			{
				 return _sentimentScore;
			}
			set
			{
				_sentimentScore = value;
				_isDirty = true;
			}
		}
		
		public virtual string PlaceTimeZone
		{
			get
			{
				 return _placeTimeZone;
			}
			set
			{
				_placeTimeZone = value;
				_isDirty = true;
			}
		}
		
		public virtual string TweetText
		{
			get
			{
				 return _tweetText;
			}
			set
			{
				_tweetText = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Retweeted
		{
			get
			{
				 return _retweeted;
			}
			set
			{
				_retweeted = value;
				_isDirty = true;
			}
		}

        public virtual Int32 TotalCount
        {
            get
            {
                return _totalCount;
            }
            set
            {
                _totalCount = value;
                _isDirty = true;
            }
        }

        public virtual Int32? RetweetCount
		{
			get
			{
				 return _retweetCount;
			}
			set
			{
				_retweetCount = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CreatedAt
		{
			get
			{
				 return _createdAt;
			}
			set
			{
				_createdAt = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
