/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.9
** This class was generated on 18-11-2016 02:12:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

//source:https://www.codetrigger.com/default.aspx?vwsess=47493
namespace TwitterAnalyticsDBL.DataObjects
{
	public partial class DAOTweetMentions : AzureSQLDBConn_BaseData
	{
		#region member variables
		protected Int64? _id;
		protected DateTime _time;
		protected string _topic;
		protected Int64? _count;
		protected double? _avg;
		protected double? _min;
		protected double? _max;
		protected double? _stdev;
		protected Int32? _errorCode;
		#endregion

		#region class methods
		public DAOTweetMentions()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table TweetMentions based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOTweetMentions
		///</returns>
		///<parameters>
		///Int64? id
		///</parameters>
		public static DAOTweetMentions SelectOne(Int64? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TweetMentions");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_SelectOne returned error code: " + errorCode );

				DAOTweetMentions retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOTweetMentions();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int64?)null : (Int64?)dt.Rows[0]["Id"];
					retObj._time					 = Convert.IsDBNull(dt.Rows[0]["time"]) ? DateTime.MinValue : (DateTime)dt.Rows[0]["time"];
					retObj._topic					 = Convert.IsDBNull(dt.Rows[0]["topic"]) ? null : (string)dt.Rows[0]["topic"];
					retObj._count					 = Convert.IsDBNull(dt.Rows[0]["count"]) ? (Int64?)null : (Int64?)dt.Rows[0]["count"];
					retObj._avg					 = Convert.IsDBNull(dt.Rows[0]["avg"]) ? (double?)null : (double?)dt.Rows[0]["avg"];
					retObj._min					 = Convert.IsDBNull(dt.Rows[0]["min"]) ? (double?)null : (double?)dt.Rows[0]["min"];
					retObj._max					 = Convert.IsDBNull(dt.Rows[0]["max"]) ? (double?)null : (double?)dt.Rows[0]["max"];
					retObj._stdev					 = Convert.IsDBNull(dt.Rows[0]["stdev"]) ? (double?)null : (double?)dt.Rows[0]["stdev"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table TweetMentions based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_DeleteOne returned error code: " + _errorCode );

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

        ///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table TweetMentions based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAll(string UserId)
        {
            SqlCommand command = new SqlCommand();
            command.CommandText = InlineProcs.ctprTweetMentions_DeleteAll;
            command.CommandType = CommandType.Text;
            SqlConnection staticConnection = StaticSqlConnection;
            command.Connection = staticConnection;

            try
            {
                command.Parameters.Add(new SqlParameter("@UserId", SqlDbType.NVarChar, 4000, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)UserId ?? (object)DBNull.Value));
                command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                staticConnection.Open();

                command.ExecuteNonQuery();

                _errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
                if (_errorCode > 1)
                    throw new Exception("procedure ctprTweetMentions_DeleteOne returned error code: " + _errorCode);

            }
            catch
            {
                throw;
            }
            finally
            {
                staticConnection.Close();
                command.Dispose();
            }
        }

        ///<Summary>
        ///Insert a new row
        ///This method saves a new object to the table TweetMentions
        ///</Summary>
        ///<returns>
        ///void
        ///</returns>
        ///<parameters>
        ///
        ///</parameters>
        public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@time", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@topic", SqlDbType.NVarChar, 4000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_topic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@count", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_count?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@avg", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_avg?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@min", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_min?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@max", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_max?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@stdev", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_stdev?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_InsertOne returned error code: " + _errorCode );

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Int64?)null : (Int64?)command.Parameters["@Id"].Value;
				_time					 = Convert.IsDBNull(command.Parameters["@time"].Value) ? DateTime.MinValue : (DateTime)command.Parameters["@time"].Value;
				_topic					 = Convert.IsDBNull(command.Parameters["@topic"].Value) ? null : (string)command.Parameters["@topic"].Value;
				_count					 = Convert.IsDBNull(command.Parameters["@count"].Value) ? (Int64?)null : (Int64?)command.Parameters["@count"].Value;
				_avg					 = Convert.IsDBNull(command.Parameters["@avg"].Value) ? (double?)null : (double?)command.Parameters["@avg"].Value;
				_min					 = Convert.IsDBNull(command.Parameters["@min"].Value) ? (double?)null : (double?)command.Parameters["@min"].Value;
				_max					 = Convert.IsDBNull(command.Parameters["@max"].Value) ? (double?)null : (double?)command.Parameters["@max"].Value;
				_stdev					 = Convert.IsDBNull(command.Parameters["@stdev"].Value) ? (double?)null : (double?)command.Parameters["@stdev"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table TweetMentions
		///</Summary>
		///<returns>
		///IList-DAOTweetMentions.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOTweetMentions> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TweetMentions");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_SelectAll returned error code: " + errorCode );

				List<DAOTweetMentions> objList = new List<DAOTweetMentions>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTweetMentions retObj = new DAOTweetMentions();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int64?)null : (Int64?)row["Id"];
						retObj._time					 = Convert.IsDBNull(row["time"]) ? DateTime.MinValue : (DateTime)row["time"];
						retObj._topic					 = Convert.IsDBNull(row["topic"]) ? null : (string)row["topic"];
						retObj._count					 = Convert.IsDBNull(row["count"]) ? (Int64?)null : (Int64?)row["count"];
						retObj._avg					 = Convert.IsDBNull(row["avg"]) ? (double?)null : (double?)row["avg"];
						retObj._min					 = Convert.IsDBNull(row["min"]) ? (double?)null : (double?)row["min"];
						retObj._max					 = Convert.IsDBNull(row["max"]) ? (double?)null : (double?)row["max"];
						retObj._stdev					 = Convert.IsDBNull(row["stdev"]) ? (double?)null : (double?)row["stdev"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

        ///<Summary>
		///Select Latest 10 Mentions
		///This method returns all data rows in the table TweetMentions
		///</Summary>
		///<returns>
		///IList-DAOTweetMentions.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOTweetMentions> SelectLatest(string userId)
        {
            SqlCommand command = new SqlCommand();
            command.CommandText = InlineProcs.ctprTweetMentions_SelectLatest;
            command.CommandType = CommandType.Text;
            SqlConnection staticConnection = StaticSqlConnection;
            command.Connection = staticConnection;

            DataTable dt = new DataTable("TweetMentions");
            SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
            try
            {
                command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));
                command.Parameters.Add(new SqlParameter("@UserId", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)userId ?? (object)DBNull.Value));

                staticConnection.Open();
                sqlAdapter.Fill(dt);

                int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
                if (errorCode > 1)
                    throw new Exception("procedure ctprTweetMentions_SelectAll returned error code: " + errorCode);

                List<DAOTweetMentions> objList = new List<DAOTweetMentions>();
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        DAOTweetMentions retObj = new DAOTweetMentions();
                        //retObj._id = Convert.IsDBNull(row["Id"]) ? (Int64?)null : (Int64?)row["Id"];
                        retObj._time = Convert.IsDBNull(row["time"]) ? DateTime.MinValue : (DateTime)row["time"];
                        //retObj._topic = Convert.IsDBNull(row["topic"]) ? null : (string)row["topic"];
                        retObj._count = Convert.IsDBNull(row["count"]) ? (Int64?)null : (Int64?)row["count"];
                        retObj._avg = Convert.IsDBNull(row["avg"]) ? (double?)null : Math.Round((double)row["avg"],2);
                        //retObj._min = Convert.IsDBNull(row["min"]) ? (double?)null : (double?)row["min"];
                        //retObj._max = Convert.IsDBNull(row["max"]) ? (double?)null : (double?)row["max"];
                        //retObj._stdev = Convert.IsDBNull(row["stdev"]) ? (double?)null : (double?)row["stdev"];
                        objList.Add(retObj);
                    }
                }
                return objList;
            }
            catch
            {
                throw;
            }
            finally
            {
                staticConnection.Close();
                command.Dispose();
            }
        }

        ///<Summary>
		///Select Latest 10 Mentions
		///This method returns all data rows in the table TweetMentions
		///</Summary>
		///<returns>
		///IList-DAOTweetMentions.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOTweetMentions> SelectDistinctTopics(string userId)
        {
            SqlCommand command = new SqlCommand();
            command.CommandText = InlineProcs.ctprTweetMentions_SelectDistinctTopics;
            command.CommandType = CommandType.Text;
            SqlConnection staticConnection = StaticSqlConnection;
            command.Connection = staticConnection;

            DataTable dt = new DataTable("TweetMentions");
            SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
            try
            {
                command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));
                command.Parameters.Add(new SqlParameter("@UserId", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)userId ?? (object)DBNull.Value));

                staticConnection.Open();
                sqlAdapter.Fill(dt);

                int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
                if (errorCode > 1)
                    throw new Exception("procedure ctprTweetMentions_SelectAll returned error code: " + errorCode);

                List<DAOTweetMentions> objList = new List<DAOTweetMentions>();
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        DAOTweetMentions retObj = new DAOTweetMentions();
                        //retObj._id = Convert.IsDBNull(row["Id"]) ? (Int64?)null : (Int64?)row["Id"];
                        //retObj._time = Convert.IsDBNull(row["time"]) ? DateTime.MinValue : (DateTime)row["time"];
                        retObj._topic = Convert.IsDBNull(row["topic"]) ? null : (string)row["topic"];
                        //retObj._count = Convert.IsDBNull(row["count"]) ? (Int64?)null : (Int64?)row["count"];
                        //retObj._avg = Convert.IsDBNull(row["avg"]) ? (double?)null : Math.Round((double)row["avg"], 2);
                        //retObj._min = Convert.IsDBNull(row["min"]) ? (double?)null : (double?)row["min"];
                        //retObj._max = Convert.IsDBNull(row["max"]) ? (double?)null : (double?)row["max"];
                        //retObj._stdev = Convert.IsDBNull(row["stdev"]) ? (double?)null : (double?)row["stdev"];
                        objList.Add(retObj);
                    }
                }
                return objList;
            }
            catch
            {
                throw;
            }
            finally
            {
                staticConnection.Close();
                command.Dispose();
            }
        }

        ///<Summary>
        ///</Summary>
        ///<returns>
        ///Int32
        ///</returns>
        ///<parameters>
        ///
        ///</parameters>
        public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_SelectAllCount returned error code: " + errorCode );

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOTweetMentions.
		///</returns>
		///<parameters>
		///DAOTweetMentions daoTweetMentions
		///</parameters>
		public static IList<DAOTweetMentions> SelectAllBySearchFields(DAOTweetMentions daoTweetMentions)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TweetMentions");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@time", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@topic", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Topic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@count", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Count?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@avg", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Avg?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@min", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Min?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@max", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Max?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@stdev", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Stdev?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_SelectAllBySearchFields returned error code: " + errorCode );

				List<DAOTweetMentions> objList = new List<DAOTweetMentions>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTweetMentions retObj = new DAOTweetMentions();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int64?)null : (Int64?)row["Id"];
						retObj._time					 = Convert.IsDBNull(row["time"]) ? DateTime.MinValue : (DateTime)row["time"];
						retObj._topic					 = Convert.IsDBNull(row["topic"]) ? null : (string)row["topic"];
						retObj._count					 = Convert.IsDBNull(row["count"]) ? (Int64?)null : (Int64?)row["count"];
						retObj._avg					 = Convert.IsDBNull(row["avg"]) ? (double?)null : (double?)row["avg"];
						retObj._min					 = Convert.IsDBNull(row["min"]) ? (double?)null : (double?)row["min"];
						retObj._max					 = Convert.IsDBNull(row["max"]) ? (double?)null : (double?)row["max"];
						retObj._stdev					 = Convert.IsDBNull(row["stdev"]) ? (double?)null : (double?)row["stdev"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOTweetMentions daoTweetMentions
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOTweetMentions daoTweetMentions)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@time", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@topic", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Topic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@count", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Count?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@avg", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Avg?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@min", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Min?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@max", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Max?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@stdev", SqlDbType.Float, 8, ParameterDirection.Input, true, 53, 0, "", DataRowVersion.Proposed, (object)daoTweetMentions.Stdev?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_SelectAllBySearchFieldsCount returned error code: " + errorCode );

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table TweetMentions based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTweetMentions_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@time", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_time?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@topic", SqlDbType.NVarChar, 4000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_topic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@count", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_count?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@avg", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_avg?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@min", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_min?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@max", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_max?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@stdev", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_stdev?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprTweetMentions_UpdateOne returned error code: " + _errorCode );

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Int64?)null : (Int64?)command.Parameters["@Id"].Value;
				_time					 = Convert.IsDBNull(command.Parameters["@time"].Value) ? DateTime.MinValue: (DateTime)command.Parameters["@time"].Value;
				_topic					 = Convert.IsDBNull(command.Parameters["@topic"].Value) ? null : (string)command.Parameters["@topic"].Value;
				_count					 = Convert.IsDBNull(command.Parameters["@count"].Value) ? (Int64?)null : (Int64?)command.Parameters["@count"].Value;
				_avg					 = Convert.IsDBNull(command.Parameters["@avg"].Value) ? (double?)null : (double?)command.Parameters["@avg"].Value;
				_min					 = Convert.IsDBNull(command.Parameters["@min"].Value) ? (double?)null : (double?)command.Parameters["@min"].Value;
				_max					 = Convert.IsDBNull(command.Parameters["@max"].Value) ? (double?)null : (double?)command.Parameters["@max"].Value;
				_stdev					 = Convert.IsDBNull(command.Parameters["@stdev"].Value) ? (double?)null : (double?)command.Parameters["@stdev"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public DateTime Time
		{
			get
			{
				return _time;
			}
			set
			{
				_time = value;
			}
		}

		public string Topic
		{
			get
			{
				return _topic;
			}
			set
			{
				_topic = value;
			}
		}

		public Int64? Count
		{
			get
			{
				return _count;
			}
			set
			{
				_count = value;
			}
		}

		public double? Avg
		{
			get
			{
				return _avg;
			}
			set
			{
				_avg = value;
			}
		}

		public double? Min
		{
			get
			{
				return _min;
			}
			set
			{
				_min = value;
			}
		}

		public double? Max
		{
			get
			{
				return _max;
			}
			set
			{
				_max = value;
			}
		}

		public double? Stdev
		{
			get
			{
				return _stdev;
			}
			set
			{
				_stdev = value;
			}
		}

		public Int32? ErrorCode
		{
			get
			{
				return _errorCode;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace TwitterAnalyticsDBL.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprTweetMentions_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[Id]
			,[time]
			,[topic]
			,[count]
			,[avg]
			,[min]
			,[max]
			,[stdev]
			FROM [dbo].[TweetMentions]
			WHERE 
			[Id] = @Id
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprTweetMentions_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			-- returning the error code if any
			DELETE [dbo].[TweetMentions]
			WHERE 
			[Id] = @Id
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

        internal static string ctprTweetMentions_DeleteAll = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			-- returning the error code if any
			DELETE [dbo].[TweetMentions]
			WHERE 
			[UserId] = @UserId
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

        internal static string ctprTweetMentions_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			-- returning the error code if any, and the identity field, if any
			INSERT [dbo].[TweetMentions]
			(
			[time]
			,[topic]
			,[count]
			,[avg]
			,[min]
			,[max]
			,[stdev]
			)
			VALUES
			(
			@time
			,@topic
			,@count
			,@avg
			,@min
			,@max
			,@stdev
			)
			SELECT 
			@Id = [Id]
			,@time = [time]
			,@topic = [topic]
			,@count = [count]
			,@avg = [avg]
			,@min = [min]
			,@max = [max]
			,@stdev = [stdev]
			FROM [dbo].[TweetMentions]
			WHERE 
			Id = SCOPE_IDENTITY()
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprTweetMentions_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[Id]
			,[time]
			,[topic]
			,[count]
			,[avg]
			,[min]
			,[max]
			,[stdev]
			FROM [dbo].[TweetMentions]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

        internal static string ctprTweetMentions_SelectLatest = @"
			-- Select Latest 10
			-- selects all rows from the table
			-- returning the error code if any
			SELECT TOP 10			
			[time]			
			,sum([count]) as 'count',
            avg([avg]) as 'avg'			
			FROM[dbo].[TweetMentions] where UserId=@UserId
            group by time order by[time] desc 
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

        internal static string ctprTweetMentions_SelectDistinctTopics = @"
			-- Select Latest 10
			-- selects all rows from the table
			-- returning the error code if any
			select distinct topic from tweetmentions where UserId=@UserId            
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

        internal static string ctprTweetMentions_SelectAllCount = @"
			
			-- selects count of all rows from the table
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [dbo].[TweetMentions]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprTweetMentions_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			-- returning the error code if any
			SELECT 
			[Id],
			[time],
			[topic],
			[count],
			[avg],
			[min],
			[max],
			[stdev]
			FROM [dbo].[TweetMentions]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([time] LIKE @time OR @time is null)
			AND ([topic] LIKE @topic OR @topic is null)
			AND ([count] LIKE @count OR @count is null)
			AND ([avg] LIKE @avg OR @avg is null)
			AND ([min] LIKE @min OR @min is null)
			AND ([max] LIKE @max OR @max is null)
			AND ([stdev] LIKE @stdev OR @stdev is null)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprTweetMentions_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [dbo].[TweetMentions]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([time] LIKE @time OR @time is null)
			AND ([topic] LIKE @topic OR @topic is null)
			AND ([count] LIKE @count OR @count is null)
			AND ([avg] LIKE @avg OR @avg is null)
			AND ([min] LIKE @min OR @min is null)
			AND ([max] LIKE @max OR @max is null)
			AND ([stdev] LIKE @stdev OR @stdev is null)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprTweetMentions_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			-- returning the error code if any, and the identity field, if any
			
			UPDATE [dbo].[TweetMentions]
			SET
			[time] = @time
			,[topic] = @topic
			,[count] = @count
			,[avg] = @avg
			,[min] = @min
			,[max] = @max
			,[stdev] = @stdev
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@time = [time]
			,@topic = [topic]
			,@count = [count]
			,@avg = [avg]
			,@min = [min]
			,@max = [max]
			,@stdev = [stdev]
			FROM [dbo].[TweetMentions]
			WHERE 
			[Id] = @Id
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

	}
}
#endregion
