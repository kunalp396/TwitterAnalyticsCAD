/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.9
** This class was generated on 18-11-2016 02:12:11
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace TwitterAnalyticsDBL.DataObjects
{
	public partial class DAOTimeZone : AzureSQLDBConn_BaseData
	{
		#region member variables
		protected Int64? _id;
		protected string _timeZoneName;
		protected string _timeZoneDisplayName;
	
		#endregion

		#region class methods
		public DAOTimeZone()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table TweetCount
		///</Summary>
		///<returns>
		///IList-DAOTimeZone.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOTimeZone> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTimeZone_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TimeZone");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprTimeZone_SelectAll returned error code: " + errorCode );

				List<DAOTimeZone> objList = new List<DAOTimeZone>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTimeZone retObj = new DAOTimeZone();
						retObj._id					 = Convert.IsDBNull(row["CountryCode"]) ? (Int64?)null : (Int64?)row["CountryCode"];
						retObj._timeZoneName					 = Convert.IsDBNull(row["CountryName"]) ? null : (string)row["CountryName"];
                        retObj._timeZoneDisplayName = Convert.IsDBNull(row["TimeZoneName"]) ? null : (string)row["TimeZoneName"];
                        objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}
        

		#endregion

		#region member properties

		public Int64? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}


        public string TimeZoneName
        {
            get { return _timeZoneName; }
            set { _timeZoneName = value; }
        }



        public string TimeZoneDisplayName
        {
            get { return _timeZoneDisplayName; }
            set { _timeZoneDisplayName = value; }
        }


        #endregion
    }
}

#region inline sql procs
namespace TwitterAnalyticsDBL.DataObjects
{
	public partial class InlineProcs
	{
		
		internal static string ctprTimeZone_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			-- returning the error code if any
			SELECT [CountryCode]
      ,[CountryName]
      ,[TimeZoneName]
  FROM [dbo].[TimeZone]         
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";
        

	}
}
#endregion
